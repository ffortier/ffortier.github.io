load("@rules_cc//cc:defs.bzl", "cc_library")

defines = select({
    "@platforms//os:linux": [
        "_GNU_SOURCE",
        "PLATFORM_DESKTOP",
    ],
    "//conditions:default": ["PLATFORM_DESKTOP"],
})

modules = glob(
    ["src/*.c"],
    exclude = [
        "src/raudio.c",  # Currently not supported on macos hermetic sysroot.
        "src/rglfw.c",  # Provided differently
    ],
)

cc_library(
    name = "rglfw_macos",
    srcs = ["src/rglfw.c"],
    additional_compiler_inputs = [
        ":hdrs",
        ":external",
        ":platforms",
    ],
    copts = ["-ObjC"],
    includes = [
        "src/external/glfw/include",
    ],
    linkopts = [
        "-framework Cocoa",
        "-framework CoreVideo",
        "-framework OpenGL",
        "-framework IOKit",
        "-framework AppKit",
        "-framework Foundation",
        "-framework CoreFoundation",
        "-framework CoreGraphics",
        "-framework Carbon",
    ],
    local_defines = defines,
    tags = ["manual"],
)

cc_library(
    name = "rglfw_linux",
    srcs = ["src/rglfw.c"],
    additional_compiler_inputs = [
        ":hdrs",
        ":external",
        ":platforms",
    ],
    includes = [
        "src/external/glfw/include",
    ],
    linkopts = [
        "-lpthread",
        "-ldl",
    ],
    local_defines = defines,
    tags = ["manual"],
)

alias(
    name = "rglfw",
    actual = select({
        "@platforms//os:macos": ":rglfw_macos",
        "//conditions:default": ":rglfw_linux",
    }),
)

filegroup(
    name = "hdrs",
    srcs = glob(["src/*.h"]),
)

filegroup(
    name = "external",
    srcs = glob([
        "src/external/**/*",
    ]),
)

filegroup(
    name = "platforms",
    srcs = glob([
        "src/platforms/**/*.c",
    ]),
)

[
    cc_library(
        name = module.removesuffix(".c"),
        srcs = [
            module,
        ],
        additional_compiler_inputs = [
            ":hdrs",
            ":external",
            ":platforms",
        ],
        includes = [
            "src/external/glfw/include",
        ],
        local_defines = defines,
    )
    for module in modules
]

cc_library(
    name = "raylib",
    hdrs = [":hdrs"],
    visibility = ["//visibility:public"],
    deps = [":rglfw"] + [
        ":%s" % module.removesuffix(".c")
        for module in modules
    ],
)
